Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.

In flexbox layout items will be laid out following either the main axis (from main-start to main-end) or the cross axis (from cross-start to cross-end).

The main axis of a flex container is the primary axis along which flex items are laid out (it is not necessarily horizontal; it depends on the flex-direction property).

------------------
Flexbox properties
------------------

1. display
This defines a flex container. It enables a flex context for all its direct children.


2. flex-direction

Values:
    row (default): left to right in ltr; right to left in rtl
    row-reverse: right to left in ltr; left to right in rtl
    column: same as row but top to bottom
    column-reverse: same as row-reverse but bottom to top

This establishes the main-axis, thus defining the direction flex items are placed in the flex container.
Flexbox is (aside from optional wrapping) a single-direction layout concept.
Think of flex items as primarily laying out either in horizontal rows or vertical columns.


3. flex-wrap

Values:
    nowrap (default): all flex items will be on one line
    wrap: flex items will wrap onto multiple lines, from top to bottom.
    wrap-reverse: flex items will wrap onto multiple lines from bottom to top.

By default, flex items will all try to fit onto one line.
You can change that and allow the items to wrap as needed with this property.


4. flex-flow

This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container’s main and cross axes.
The default value is row nowrap.


5. justify-content

This defines the alignment along the main axis.
It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size.
It also exerts some control over the alignment of items when they overflow the line.


6. align-items

This defines the default behavior for how flex items are laid out along the cross axis on the current line.
Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).


7. align-content

This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.

Note: This property only takes effect on multi-line flexible containers, where flex-wrap is set to either wrap or wrap-reverse).
A single-line flexible container (i.e. where flex-wrap is set to its default value, no-wrap) will not reflect align-content.


8. gap (gap, row-gap, column-gap)

The gap property explicitly controls the space between flex items.
It applies that spacing only between items not on the outer edges.

The behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like justify-content: space-between;) then the gap will only take effect if that space would end up smaller.


9. flex-shrink

This defines the ability for a flex item to shrink if necessary.

flex-shrink: 0 - no shrink
flex-shrink: 1 - is default
flex-shrink: 2 - will be shrinked 2x the standard value


10. flex-grow

This defines the ability for a flex item to grow if necessarym (default 0).
It accepts a unitless value that serves as a proportion.
It dictates what amount of the available space inside the flex container the item should take up.

If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children.
If one of the children has a value of 2, that child would take up twice as much of the space as either one of the others (or it will try, at least).


