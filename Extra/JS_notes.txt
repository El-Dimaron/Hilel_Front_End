JavaScript Basics

JS —Ñ–∞–π–ª –º–æ–∂–Ω–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¥–æ html –¥–æ–∫—É–º–µ–Ω—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–µ–≥—É <script>:
    <script src="./scripts/main.js"></script>

–¢–µ–≥ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –≤–Ω–∏–∑—É html —Ñ–∞–π–ª—É - –≤ –∫—ñ–Ω—Ü—ñ —Ç–µ–≥—É <body>.
    –†–æ–±–∏—Ç—å—Å—è —Ü–µ —á–µ—Ä–µ–∑ —Ç–µ, —â–æ HTML –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è —É –ø–æ—Ä—è–¥–∫—É –ø–æ—è–≤–∏ –π–æ–≥–æ —É —Ñ–∞–π–ª—ñ.
    –Ø–∫—â–æ JavaScript –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –ø–µ—Ä—à–∏–º —ñ –π–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ HTML –Ω–∏–∂—á–µ –∑–∞ –Ω—å–æ–≥–æ, –≤—ñ–Ω –Ω–µ –∑–º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏,
    –±–æ JavaScript –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ä–∞–Ω—ñ—à–µ, –Ω—ñ–∂ HTML, –∑ —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, JS –∫–æ–¥ –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É –≤ html –¥–æ–∫—É–º–µ–Ω—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ç–µ–≥ <script></script> –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—É scr.
    <script>
    let myHeading = document.querySelector('h1'); 
    myHeading.textContent = '–ü—Ä–∏–≤—ñ—Ç, –°–≤—ñ—Ç!';
    </script>



Variables (–∑–º—ñ–Ω–Ω—ñ)

–í–∏ –ø–æ—á–∏–Ω–∞—î—Ç–µ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É –∑ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º let (–∞–±–æ var), –∑–∞ —è–∫–∏–º —Å–ª—ñ–¥—É—î –±—É–¥—å-—è–∫–µ —ñ–º'—è, —è–∫–∏–º –≤–∏ –∑–∞—Ö–æ—á–µ—Ç–µ —ó—ó –Ω–∞–∑–≤–∞—Ç–∏:
    let myVariable;


Naming rules and conventions

    Rules (must follow)

        Allowed characters:
            - Letters (a‚Äìz, A‚ÄìZ)
            - Digits (0‚Äì9) ‚Äî but not at the beginning
            - Underscore (_)
            - Dollar sign ($)

                let name1;   // valid
                let _value;  // valid
                let $price;  // valid
                let 1age;    // ‚ùå invalid (cannot start with digit)

        Case-sensitive:
            userName and username are two different variables.

        No reserved keywords:
            You can‚Äôt name variables let, class, return, if, etc.

        Unicode is allowed:
            Technically you can use emojis or non-Latin letters:

            let caf√© = "coffee"; 
            let üöÄ = "rocket";

            But this is discouraged for maintainability.

    Conventions (best practices)

        camelCase for variables and functions:
            let firstName = "John";
            function getUserData() {}

        PascalCase for classes and constructors:
            class UserProfile {}

        UPPER_CASE with underscores for constants that never change:
            const MAX_SPEED = 120;

        Meaningful, descriptive names:
            let priceAfterDiscount;   // good
            let pad;                  // ‚ùå unclear

        Booleans start with is, has, can, should:
            let isAvailable = true;
            let hasPermission = false;

        Avoid one-letter names, except for small loops:
            for (let i = 0; i < 10; i++) {}

        Consistency across the project is key - if your team uses camelCase everywhere, stick with it.


–í—Å—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤ JS –º–∞—é—Ç—å –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—å —Ç–æ—á–∫–æ—é –∑ –∫–æ–º–æ—é:
    var testVariable = "Test";

–ó–º—ñ–Ω–Ω—É –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—Å–∏—Ç–∏ –æ–¥–Ω—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é, –∞ –Ω–∞–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—à–æ—é.
    var testVariable;
    testVariable = "Test";

–ü—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ –ø—ñ–∑–Ω—ñ—à–µ:
    var testVariable = "Test";
    testVariable = "Test 2.0";


–î–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ 'var' –∞–±–æ 'let'.

In modern JavaScript you‚Äôll usually see let (and const) instead of var. They all declare variables, but they behave differently.

var

    Function-scoped
        If declared inside a function, it‚Äôs only visible in that function.
        But if declared inside a block (if, for, {}), it ‚Äúescapes‚Äù the block.

        if (true) {
            var x = 10;
        }
        console.log(x); // ‚úÖ 10 (leaks out of block)

    Hoisted & initialized with undefined
        The declaration is moved (‚Äúhoisted‚Äù) to the top of its scope, so you can reference it before definition (though it‚Äôs undefined).

        console.log(y); // undefined
        var y = 5;

let (modern, ES6+)

    Block-scoped
        Stays inside {} where it was declared.
        if (true) {
            let a = 20;
        }
        console.log(a); // ‚ùå ReferenceError

    Hoisted but not initialized
        Exists in a temporal dead zone until execution reaches its declaration.

        console.log(b); // ‚ùå ReferenceError
        let b = 30;
    

Why use let/const instead of var?
    - Clearer scoping ‚Üí avoids bugs from leaking variables.
    - Predictable behavior ‚Üí no accidental hoisting surprises.
    - Modern standard ‚Üí almost all style guides recommend:
        - Default to const
        - Use let if reassignment is needed
        - Avoid var (only use it for legacy code).

So using let is the modern, best practice way of declaring variables.



alert()

alert() is a built-in JavaScript function that shows a modal dialog box with a message and an OK button.
    It‚Äôs mainly used for quick debugging or simple notifications in the browser.
    It pauses script execution until the user clicks OK.
    Example:
        alert("Hello, world!");

        This will pop up a small dialog with Hello, world!.



Data Types

    Primitive Types - stored directly in memory as a single value.

        String ‚Üí text data
            let name = "Alice";
            let greeting = 'Hello';
            let sentence = `Hi, ${name}`; // template literal

        Number ‚Üí all numbers (integers, floats, etc.)
            let age = 25;
            let price = 19.99;
            let notANumber = NaN;  // special "Not a Number"
            let infinity = Infinity;

        BigInt ‚Üí very large integers (added in ES2020)
            let big = 1234567890123456789012345678901234567890n;

        Boolean ‚Üí logical true/false
            let isActive = true;
            let hasPermission = false;

        Undefined ‚Üí a variable declared but not assigned a value
            let x;
            console.log(x); // undefined

        Null ‚Üí intentional "empty" value
            let user = null; // means "no user"

        Symbol ‚Üí unique identifiers (often for object keys)
            let sym1 = Symbol("id");
            let sym2 = Symbol("id");
            console.log(sym1 === sym2); // false


    Reference Types (Objects) - stored by reference, not by value.

        Array ‚Üí ordered list of values
            let colors = ["red", "green", "blue"];
        
        Object ‚Üí collections of key‚Äìvalue pairs
            let user = {name: "Alice", age: 25};

        Function ‚Üí callable objects
            function greet() { console.log("Hello"); }

        Date, RegExp, Map, Set, WeakMap, WeakSet, etc. ‚Üí special built-in objects.


Special Notes

JavaScript is dynamically typed: you don‚Äôt declare a variable‚Äôs type, it‚Äôs determined at runtime.
    let value = 42;       // number
    value = "forty two";  // now string

You can check a type with typeof:
    typeof 123;       // "number"
    typeof "hello";   // "string"
    typeof null;      // "object" (quirk in JS)
    typeof [];        // "object"
    typeof (()=>{});  // "function"


Comments in JS
    // ‚Üí quick inline notes
    /* ... */ ‚Üí block/multi-line comments



Operators

Operators let you perform actions on values and variables.

Categories of JavaScript Operators
    1Ô∏è‚É£ Arithmetic Operators (numbers)
        let x = 10, y = 3;

        x + y;  // 13 (addition)
        x - y;  // 7  (subtraction)
        x * y;  // 30 (multiplication)
        x / y;  // 3.333... (division)
        x % y;  // 1  (modulus ‚Üí remainder)
        x ** y; // 1000 (exponentiation ‚Üí 10^3)
    
    2Ô∏è‚É£ Assignment Operators
        let a = 5;

        a += 2; // 7 (same as a = a + 2)
        a -= 2; // 5
        a *= 2; // 10
        a /= 2; // 5
        a %= 2; // 1
        a **= 2; // 1 (same as a = a ** 2)
    
    3Ô∏è‚É£ Comparison Operators (return true or false)
        5 == "5";   // true  (loose equality, type conversion)
        5 === "5";  // false (strict equality, no type conversion)
        5 != "5";   // false
        5 !== "5";  // true

        10 > 5;   // true
        10 < 5;   // false
        10 >= 10; // true
        10 <= 9;  // false

    4Ô∏è‚É£ Logical Operators
        true && false; // false (AND)
        true || false; // true  (OR)
        !true;         // false (NOT)

    5Ô∏è‚É£ Unary Operators (does not reassign the variable)
        let n = 5;
        +n; // 5   (plus does nothing special here)
        -n; // -5  (negation)

        typeof n; // "number"
        delete obj.prop; // removes a property

    6Ô∏è‚É£ Increment / Decrement
        let i = 0;

        i++; // post-increment ‚Üí returns 0, then i = 1
        ++i; // pre-increment ‚Üí i = 1, returns 1

        i--; // post-decrement
        --i; // pre-decrement

    7Ô∏è‚É£ Ternary Operator (Conditional)
        let age = 18;
        let status = (age >= 18) ? "Adult" : "Minor"; // "Adult"

    8Ô∏è‚É£ String Operators
        "Hello" + " " + "World"; // "Hello World"
        "Hi" + 5; // "Hi5" (number converted to string)




Conditions

    1Ô∏è‚É£ if statement - executes code if the condition is true.
        let age = 18;

        if (age >= 18) {
            console.log("You are an adult.");
        }

    2Ô∏è‚É£ if‚Ä¶else - provides an alternative if the condition is false.
        let age = 16;

        if (age >= 18) {
            console.log("Adult");
        } else {
            console.log("Minor");
        }
    
    3Ô∏è‚É£ if‚Ä¶else if‚Ä¶else - checks multiple conditions in order.
        let score = 75;

        if (score >= 90) {
            console.log("Grade A");
        } else if (score >= 70) {
            console.log("Grade B");
        } else {
            console.log("Grade C");
        }
    
    4Ô∏è‚É£ switch statement - used when you have many possible values for one variable.
        let day = 3;

        switch (day) {
        case 1:
            console.log("Monday");
            break;
        case 2:
            console.log("Tuesday");
            break;
        case 3:
            console.log("Wednesday");
            break;
        default:
            console.log("Another day");
        }
    
    5Ô∏è‚É£ Truthy and Falsy values
        In JavaScript, conditions don‚Äôt need to be strictly true or false.

        Values considered falsy:
            - false
            - 0
            - "" (empty string)
            - null
            - undefined
            - NaN

        Everything else is truthy.

    6Ô∏è‚É£ Logical operators in conditions
        let age = 25;
        let hasTicket = true;

        if (age >= 18 && hasTicket) {
        console.log("Can enter the concert");
        }

        if (age < 18 || !hasTicket) {
        console.log("Cannot enter");
        }



Functions

    1Ô∏è‚É£ Function Basics

        A function is a block of code that can be defined once and called multiple times.

            function greet() {
                console.log("Hello!");
            }

            greet(); // "Hello!"
            greet(); // "Hello!"

    2Ô∏è‚É£ Function with Parameters

        Functions can take parameters (inputs) and return results.

            function add(a, b) {
                return a + b;
            }

            let sum = add(5, 3); // 8
            console.log(sum);

    3Ô∏è‚É£ Default Parameters

        You can set default values.

            function greet(name = "Guest") {
                console.log("Hello, " + name);
            }

            greet("Alice"); // "Hello, Alice"
            greet();        // "Hello, Guest"
        
    4Ô∏è‚É£ Function Expressions

        You can also assign a function to a variable.

            let multiply = function (x, y) {
                return x * y;
            };

            console.log(multiply(3, 4)); // 12

    5Ô∏è‚É£ Arrow Functions (ES6+)

        Shorter syntax, often used for callbacks.

            const divide = (x, y) => x / y;
            console.log(divide(10, 2)); // 5

        Special cases:

        One parameter ‚Üí no parentheses needed
            const square = n => n * n;

        No parameters ‚Üí use ()
            const hello = () => console.log("Hello!");

    6Ô∏è‚É£ Anonymous Functions

        Functions without a name, often passed as arguments.
            setTimeout(function () {
                console.log("This runs after 1 second");
            }, 1000);

        Arrow function version:
            setTimeout(() => console.log("Arrow style"), 1000);

    7Ô∏è‚É£ Returning Values

        Functions can return something, or nothing (in which case they return undefined).
            function getAge() {
                return 25;
            }
            console.log(getAge()); // 25

    8Ô∏è‚É£ Nested Functions & Scope

        Functions can be defined inside other functions.

            function outer() {
                let outerVar = "I‚Äôm outer";

                    function inner() {
                        console.log(outerVar); // can access outer variables
                    }

                inner();
            }

            outer(); // "I‚Äôm outer"



Events

Events are how JavaScript interacts with the browser and user actions.

Think of an event as:
    ‚ÄúSomething happened‚Äù ‚Üí a click, a keypress, a page load, etc.
    You write code that listens for the event and then runs a function (the event handler).

    1Ô∏è‚É£ Common Event Types
        üñ±Ô∏è Mouse Events
            click ‚Üí when an element is clicked
            dblclick ‚Üí double click
            mouseover / mouseout ‚Üí cursor enters/leaves element
            mousedown / mouseup ‚Üí mouse button pressed/released
            mousemove ‚Üí cursor moves

        ‚å®Ô∏è Keyboard Events
            keydown ‚Üí when a key is pressed
            keyup ‚Üí when a key is released
            keypress ‚Üí (deprecated, but used for character input)

        üìÑ Form Events
            submit ‚Üí form submitted
            change ‚Üí input/select value changed
            focus / blur ‚Üí element gains/loses focus
            input ‚Üí user types into a field

        üåê Window/Document Events
            load ‚Üí page fully loaded
            resize ‚Üí window resized
            scroll ‚Üí page scrolled
            DOMContentLoaded ‚Üí DOM ready (before images/scripts loaded)

    2Ô∏è‚É£ Adding Events
        1. Inline (not recommended for big projects)
            <button onclick="alert('Clicked!')">Click me</button>

        2. DOM property (DOM element is basically a JavaScript object that represents an HTML tag)
            const btn = document.querySelector("button");
                btn.onclick = function () {
                alert("Button clicked!");
            };

        3. addEventListener (best practice ‚úÖ)
            const btn = document.querySelector("button");
            btn.addEventListener("click", () => {
                alert("Button clicked!");
            });
    
    3Ô∏è‚É£ Event Object
        When an event happens, the browser creates an event object with details (mouse position, key pressed, etc.).

        document.addEventListener("keydown", function (event) {
            console.log("Key pressed:", event.key);
        });
    
    4Ô∏è‚É£ Removing Events
        function greet() {
            console.log("Hi!");
        }

        btn.addEventListener("click", greet);
        btn.removeEventListener("click", greet);
    
    