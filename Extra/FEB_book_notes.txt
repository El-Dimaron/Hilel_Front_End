Унікальність елемента
    Для того, щоб застосувати CSS правило для певних елементів, необхідно:
    1. Надати цим елементам атрибут class="unique-name";
    2. Вказати назву цього атрибута в css правилі .unique-name {};

    Приклад:
    <p class="dark-paragraph">Test</p>

    .dark-paragraph {
        color: rgb(255, 255, 255);
        background-color: rgb(62, 24, 97);
        }
    
    Один і той самий class name може використовуватись для багатьох елементів.

    Типи CSS селекторів:
    - селектор елементу - застосовується до зазначеного елементу:
        p {
            text-align: center;
            color: red;
        }
    
    - ID селектор - застосовується до елементу з id="para1":
        #para1 {
            text-align: center;
            color: red;
        }
    
    - селектор класу - застосовується до елементу з class="test":
        .test {
            text-align: center;
            color: red;
        }
    
    - універсальний селектор - застосовується до всіх елементів HTML на сторінці:
        * {
            text-align: center;
            color: red;
        }
    
    - селектор групування - застосовує правило до всіх вказаних елементів:
        h1, h2, p {
            text-align: center;
            color: red;
        }
    
    - селектор атрибута - застосовує правило до елементів із зазначеним атрибутом:
        a[target] {
            background-color: yellow;
        }
    
    - селектор атрибута зі значенням - застосовує правило до елементів із зазначеним атрибутом та значенням:
        a[target="_blank"] {
            background-color: yellow;
        }

    - селектор псевдокласу - використовується для визначення особливого стану елемента.
        Синтаксис псевдокласів:
            selector:pseudo-class {
                property: value;
            }

        Його можна використовувати, щоб вказати:
            ● Стиль елемента, коли користувач наводить курсор мишки.
            ● Стиль відвіданих та невідвіданих посилань по-різному.
            ● Стиль елементу, коли він отримує фокус.

        Посилання можуть відображатися по-різному:
            /* не відвідане посилання */
            a:link {
            color: red;
            }

            /* відвідане посилання */
            a:visited {
            color: red;
            }

            /* мишка над посиланням*/
            a:hover {
            color: red;
            }

            /* вибране посилання */
            a:active {
            color: red;
            }

        Селектор a:hover ПОВИНЕН йти після a:link та a:visited у визначенні CSS, щоб бути ефективним!
        Селектор a:active ПОВИНЕН йти після a:hover визначення CSS, щоб бути ефективним! Імена псевдокласів не чутливі до регістру.
        Псевдокласи можна поєднувати з класами HTML. Коли ви наводите курсор на посилання з класом “highlight”, воно змінює колір:
            a.highlight:hover {
                color: red;
            }


    
Блоки

Більшість елементів HTML на сторінці можуть бути представлені як блоки, розташовані один в одному.

 _________________________________
|                          Margin | 
|    _________________________    |  
|   |                 Padding |   |
|   |                         |   |
|   |                         |   |
|   |                         |   |
|   |          Text           |   |  
|   |                         |   |
|   |                         |   |
|   |                 Border  |   |
|   |_________________________|   |
|                                 |
|_________________________________|

Позначки:
    - margin – простір навколо зовнішньої сторони елементу;
    - padding – простір навколо контенту;
    - border - суцільна лінія, розташована поряд із padding;
    - width – ширина елементу;
    - color – колір контенту елементу (зазвичай тексту);
    - background-color – колір позаду контенту;
    - text-shadow – встановлює тінь тексту всередині елементу;
    - display – встановлює режим відображення елементу.

    Note: для таких властивостей як margin або padding можна встановити два значення:
            - перше значення елементу впливає на верхню та нижню сторони;
            - друге - на ліву і праву сторони.
            Значення auto є особливим, воно ділить простір по горизонталі порівну зліва та справа.
            Можна використовувати використовувати 1-4 значення.
            Значення встановлюються у такому порядку: зверху, праворуч, знизу, ліворуч.
                margin: 0 auto;
                padding: 0 20px 20px 20px;

    Властивість text-shadow
        Має чотири значення:
            1. Перше значення задає горизонтальне усунення тіні від тексту - як
            далеко вона рухається впоперек: негативне значення має рухати її вліво.
            2. Друге значення задає вертикальне усунення тіні від тексту - як далеко
            вона рухається вниз.
            3. Третє значення пікселів задає радіус розмиття тіні - велике значення
            означатиме більш розмиту тінь.
            4. Четверте значення задає основний колір тіні.

    

Форми

ЕЛЕМЕНТ <form> 
    Елемент <form> використовується для створення форми для введення даних:
        <form>
            елементи форми
        </form>
    Він є контейнером для різних типів елементів введення, таких як: текстові поля, прапорці, перемикачі, кнопки надсилання тощо.

ЕЛЕМЕНТ <input> 
    Елемент <input> є найбільш використовуваним елементом форми.
    Елемент <input> можна відобразити різними способами, залежно від атрибута type.
    Приклади:
        <input type="text">     - однорядкове поле введення тексту;
        <input type="radio">    - перемикач для вибору одного з багатьох варіантів;
        <input type="checkbox"> - прапорець;
        <input type="submit">   - кнопку надсилання форми;
        <input type="button">   - кнопку, яку можна натиснути.
    
    Атрибут name для <input>
        name визначає ім’я поля форми, за яким значення буде передано на сервер після відправки форми.
        Без name введене значення не потрапить у запит.

    <input type="text">
        Форма з полями введення тексту:
            <form>
                <label for="fname">Ім'я:</label><br>
                <input type="text" id="fname" name="fname"><br>
                <label for="lname">Прізвище:</label><br>
                <input type="text" id="lname" name="lname">
            </form>

        ЕЛЕМЕНТ <label>
            Атрибут for тегу <label> має дорівнювати атрибуту id елемента <input>, щоб зв’язати їх разом.
    
    <input type="radio"> - перемикач.
    Перемикачі дозволяють користувачеві вибрати ОДИН із обмеженої кількості варіантів.
    Форма з перемикачами:
        <p>Виберіть улюблену веб-мову:</p>
        <form>
            <input type="radio" id="html" name="fav_language" value="HTML">
            <label for="html">HTML</label><br>
            <input type="radio" id="css" name="fav_language" value="CSS">
            <label for="css">CSS</label><br>
            <input type="radio" id="javascript" name="fav_language" value="JavaScript">
            <label for="javascript">JavaScript</label>
        </form>

    <input type="checkbox"> - прапорець.
        Прапорці дозволяють користувачеві вибрати НУЛЬ або БІЛЬШЕ варіантів з обмеженої кількості варіантів.
        Приклад:
            <form>
                <input type="checkbox" id="vehicle1" name="vehicle1" value="Bike">
                <label for="vehicle1">У мене є велосипед</label><br>
                <input type="checkbox" id="vehicle2" name="vehicle2" value="Car">
                <label for="vehicle2">У мене є автомобіль</label><br>
                <input type="checkbox" id="vehicle3" name="vehicle3" value="Boat">
                <label for="vehicle3">У мене є човен</label>
            </form>
    
    <input type="submit"> - кнопка надсилання даних форми.
        Обробник форми зазвичай є файлом на сервері зі сценарієм для обробки вхідних даних.
        Обробник форми вказується в атрибуті дії форми.
        Форма з кнопкою надсилання:
            <form action="/action_page.php">
                <label for="fname">Ім'я:</label><br>
                <input type="text" id="fname" name="fname" value="John"><br>
                <label for="lname">Прізвище:</label><br>
                <input type="text" id="lname" name="lname" value="Doe"><br><br>
                <input type="submit" value="Надіслати">
            </form>



Атрибути форми

    Атрибут action
        Визначає дію, яка буде виконана під час надсилання форми.
        Зазвичай дані форми надсилаються у файл на сервері, коли користувач натискає кнопку відправки.
        У прикладі нижче дані форми надсилаються у файл під назвою «action_page.php».
        Цей файл містить сценарій, який обробляє дані форми.
            <form action="/action_page.php">
                <label for="fname">Ім'я:</label><br>
                <input type="text" id="fname" name="fname" value="John"><br>
                <label for="lname">Прізвище:</label><br>
                <input type="text" id="lname" name="lname" value="Doe"><br><br>
                <input type="submit" value="Submit">
            </form>
        
        Якщо атрибут action пропущено, він дорівнює адресі поточної сторінки.

    Атрибут target
        Визначає, де відображати відповідь, отриману після надсилання форми:
            _self - відповідь відображається в поточному вікні (значення за замовчуванням);
            _blank – відповідь відображається в новому вікні чи вкладці;
            _parent – відповідь відображається в батьківському фреймі;
            _top - Відповідь відображається у всьому тілі вікна.
            framename - відповідь відображається в іменованому iframe.

    Атрибут method
        Визначає метод HTTP, який буде використовуватися під час надсилання даних форми.
        Дані форми можна надіслати як змінні URL-адреси (з method="get") або як пост-транзакцію HTTP (з method="post").
        Метод HTTP за замовчуванням під час надсилання даних форми - GET.

        Примітки щодо GET (надіслані дані форми видно в URL):
            ● Додає дані форми до URL-адреси в парах ім’я/значення.
            ● НІКОЛИ не використовуйте GET для надсилання конфіденційних даних.
            ● Довжина URL-адреси обмежена (2048 символів).
            ● Корисно для надсилання форм, коли треба додати результат до закладок.
            ● GET добре підходить для незахищених даних.
        
        Примітки щодо POST:
            ● Додає дані форми в тіло запиту HTTP (надіслані дані форми не відображаються в URL-адресі).
            ● POST не має обмежень за розміром і може використовуватися для надсилання великих обсягів даних.
            ● Надсилання форм за допомогою POST не можна додати до закладок.
        
        Завжди використовуйте POST, якщо дані форми містять конфіденційну інформацію.

    Атрибут autocomplete
        Визначає, увімкнути чи вимкнути автозаповнення у формі. 
        Коли автозаповнення ввімкнено, браузер автоматично доповнює значення на основі значень, які користувач ввів раніше.

    Атрибут novalidate
        Є булевим атрибутом. Якщо він присутній, він визначає, що дані форми (вхідні дані) не повинні перевірятися під час надсилання.



Елементи форми

Елемент <form> може містити один або кілька таких елементів форми:
    ● <input>
    ● <label>
    ● <select>
    ● <textarea>
    ● <button>
    ● <fieldset>
    ● <legend>
    ● <datalist>
    ● <output>
    ● <option>
    ● <optgroup>
    

    Елемент <select>
        Визначає розкривний список:
            <label for="cars">Виберіть автомобіль:</label>
            <select id="cars" name="cars">
                <option value="volvo">Volvo</option>
                <option value="saab">Saab</option>
                <option value="fiat">Fiat</option>
                <option value="audi">Audi</option>
            </select>
        Елемент <option> визначає параметр, який можна вибрати.
        За замовчуванням вибрано перший пункт у розкривному списку.
        
        Щоб визначити попередньо вибрану опцію, додайте атрибут selected до опції:
            <option value="fiat" selected>Fiat</option>
        
        Атрибут size - вказує кількість видимих значень:
            <label for="cars">Виберіть автомобіль:</label>
            <select id="cars" name="cars" size="3">
                    <option value="volvo">Volvo</option>
                    <option value="saab">Saab</option>
                    <option value="fiat">Fiat</option>
                    <option value="audi">Audi</option>
            </select>
        
        Атрибут multiple дозволяє вибрати більше одного значення:
            <label for="cars">Виберіть автомобіль:</label>
            <select id="cars" name="cars" size="4" multiple>
                <option value="volvo">Volvo</option>
                <option value="saab">Saab</option>
                <option value="fiat">Fiat</option>
                <option value="audi">Audi</option>
            </select>

    Елемент <textarea>
        Визначає багаторядкове поле введення (текстова область):
            <textarea name="message" rows="10" cols="30">
            Кіт наблював в саду.
            </textarea>
        Атрибут rows визначає видиму кількість рядків у текстовій області.
        Атрибут cols визначає видиму ширину текстової області.
    
        Розмір текстової області можна також визначити за допомогою CSS.



Типи введення даних в HTML:
    ● <input type="button">
    ● <input type="checkbox">
    ● <input type="color">
    ● <input type="date" >
    ● <input type="datetime-local">
    ● <input type="email">
    ● <input type="file">
    ● <input type="hidden">
    ● <input type="image">
    ● <input type="month" >
    ● <input type="number">
    ● <input type="password">
    ● <input type="radio">
    ● <input type="range">
    ● <input type="reset">
    ● <input type="search">
    ● <input type="submit">
    ● <input type="tel">
    ● <input type="text">
    ● <input type="time">
    ● <input type="url">
    ● <input type="week">

Значення за замовчуванням - "text".
    

Обмеження вводу
    checked     - вказує, що поле введення має бути попередньо вибрано під час завантаження сторінки (для type="checkbox" або type="radio")
    disabled    - вказує, що поле введення має бути вимкнено
    max         - вказує максимальне значення для поля введення
    min         - вказує мінімальне значення для поля введення
    maxlength   - вказує максимальну кількість символів для поля введення
    pattern     - вказує регулярний вираз для перевірки вхідного значення
    readonly    - вказує, що поле введення неможливо змінити
    required    - вказує, що поле введення є обов’язковим (має бути заповненим)
    size        - визначає ширину (в символах) поля введення
    step        - вказує допустимі інтервали чисел для значення поля введення
    value       - вказує значення за замовчуванням для поля введення


Атрибути для <input>

value
    Визначає початкове значення для поля введення

readonly
    Визначає, що поле введення є лише для читання
    Таке поле не можна змінити (однак користувач може перейти до нього табуляцією, виділити його та скопіювати з нього текст).
    Значення цього поля буде надіслано під час надсилання форми

disabled
    Визначає, що поле введення має бути вимкнено.
    Поле введення буде непридатним для використання.
    Значення вимкненого поля введення не буде надіслано під час надсилання форми

size
    Визначає видиму ширину поля введення в символах.
    Значення розміру за замовчуванням - 20.
    Атрибут size працює з такими типами введення: текст, пошук, tel, url, email і пароль

maxlength
    Визначає максимальну кількість символів, дозволену в полі введення.

min і max 
    Визначають мінімальне та максимальне значення для введення в поле

multiple
    Визначає, що користувачеві дозволено вводити більше одного значення в поле введення

pattern
    Атрибут шаблону введення визначає регулярний вираз, за яким перевіряється значення поля введення під час надсилання форми.
    Атрибут шаблону працює з такими типами введення: текст, дата, пошук, URL-адреса, телефон, електронна пошта та пароль.
    Використовуйте глобальний title, щоб описати шаблон для відображення допоміжного тексту.
    Поле введення, яке може містити лише три літери (без цифр або спеціальних символів):
        <form>
            <label for="country_code">Код країни:</label>
            <input type="text" id="country_code" name="country_code"
            pattern="[A-Za-z]{3}" title="Трибуквений код країни">
        </form>
    
placeholder
    Текст, який відображається в полі введення перед тим, як користувач введе значення.

required
    Визначає, що поле введення має бути заповнене перед надсиланням форми.

step
    Вказує допустимі інтервали чисел для поля введення.
    Приклад: якщо step="3", дозволені числа можуть бути -3, 0, 3, 6 тощо.

autofocus
    Вказує, що поле введення має автоматично отримувати фокус під час завантаження сторінки.

height і width
    Визначають висоту і ширину елемента

list
    Атрибут list відноситься до елементу <datalist>, який містить попередньо визначені параметри для елементу <input>

autocomplete
    Вказує, увімкнути чи вимкнути автозаповнення для форми чи поля введення.

form
    Атрибут form визначає форму, до якої належить елемент <input>.
    Значення цього атрибута має дорівнювати атрибуту id елемента <form>, якому він належить.
    Поле введення, розташоване поза формою HTML (але все ще є частиною форми)

formaction
    Атрибут formaction визначає URL-адресу файлу, який оброблятиме вхідні дані після надсилання форми.
    Цей атрибут перевизначає атрибут дії елементу <form>.

formmethod
    Визначає метод HTTP для надсилання даних форми до URL-адреси вказаної в атрибуті action.
    Перевизначає атрибут method елементу <form>.

formnovalidate
    Визначає, що елемент <input> не повинен перевірятися під час надсилання.
    Цей атрибут замінює атрибут novalidate елементу <form>.
    Атрибут formnovalidate працює з такими типами введення: submit.




HTML елементи і методи розмітки

HTML має кілька семантичних елементів, які визначають різні частини веб-сторінки:
    ● <header> - Визначає заголовок документа чи розділу.
    ● <nav> - Визначає набір навігаційних посилань.
    ● <section> - Визначає розділ у документі.
    ● <article> - Визначає незалежний, автономний контент.
    ● <aside> - Визначає бічну панель.
    ● <footer> - Визначає нижній колонтитул документа або розділу.
    ● <details> - Визначає додаткові деталі, які користувач може відкривати та закривати на вимогу.
    ● <summary> - Визначає заголовок для <details> елементу.


Існують різні методи створення багатоколонних макетів. 
    ● CSS Framework.
        Використання вже готового фреймворка CSS, такого як W3.CSS або Bootstrap.

    ● CSS Float.
        Загально прийнято робити цілі веб-макети, використовуючи float властивість CSS.
    
    ● CSS Flexbox.
        Використання flexbox гарантує, що елементи поводяться передбачувано, коли макет сторінки повинен відповідати різним розмірам екрана та різним пристроям відображення.

    ● CSS Grid.
        Модуль CSS Grid Layout пропонує систему компонування на основі сітки з рядками та стовпцями, що спрощує розробку веб-сторінок без використання плаваючих елементів та позиціонування.



CSS властивості

Border (рамка)

    Тип рамки
        Властивість border-style визначає тип рамки для відображення. Значення:
            ● dotted – Визначає пунктирну рамку.
            ● dashed – Визначає пунктирну рамку.
            ● solid - Визначає суцільну рамку.
            ● double – Визначає подвійну рамку.
            ● groove – Тривимірна рифлена рамка. Ефект залежить від кольору рамки.
            ● ridge - Визначає 3D-ребристу рамку. Ефект залежить від кольору рамки.
            ● inset – Визначає рамку 3D-inset. Ефект залежить від кольору рамки.
            ● outset - Визначає рамку 3D outset. Ефект залежить від кольору рамки.
            ● none - без рамки.
            ● hidden – визначає приховану рамку.
        Властивість border-style може мати від одного до чотирьох значень (для верхньої рамки, правої рамки, нижньої рамки та лівої рамки).
    
    Ширина рамки
        Властивість border-width визначає ширину рамки.
        Ширину можна встановити як певний розмір (px, pt, cm, em) або за допомогою одного з попередньо визначених значень: thin (тонкий), medium (середній), або thick (товстий).
        Властивість border-width може мати від одного до чотирьох значень (для верхньої рамки, правої рамки, нижньої рамки та лівої рамки).
    
    Колір межі
        Властивість border-color використовується для встановлення кольору чотирьох рамок.
        Колір можна встановити за:
            ● Назвою - вкажіть назву кольору, наприклад «red».
            ● HEX - вкажіть значення HEX, наприклад "#ff0000".
            ● RGB – вкажіть значення RGB, наприклад «rgb(255,0,0)».
            ● HSL – укажіть значення HSL, наприклад «hsl(0, 100%, 50%)».
            ● transparent (прозорий)
        Властивість border-color може мати від одного до чотирьох значень (для верхньої, правої, нижньої та лівої сторін).

    Скорочення властивості
        Щоб скоротити код, також можна вказати всі окремі властивості в одній.
        Властивість border є скороченою властивістю для таких окремих властивостей:
            ● border-width
            ● border-style (обов’язково)
            ● border-color
                p {
                    border: 5px solid red;
                }

            Можливо вказати окремі властивості рамки лише для однієї сторони. Ліва сторона:
                p {
                    border-left: 6px solid red;
                }

    Округлення країв рамки:
        Властивість border-radius використовується для додавання заокруглених рамок до елементу та для зміни форми елементу:
            p {
                border: 2px solid red;
                border-radius: 5px;
            }

        border-radius є скороченою властивістю border-top-left-radius, border-top-right-radius, border-bottom-right-radius і border-bottom-left-radius.

Background (фон)

    Властивості фону використовуються для додавання фонових ефектів для елементів. 
        ● background-color
        ● background-image
        ● background-repeat
        ● background-attachment
        ● background-position
        ● background (вказати всі властивості разом)
    
    opacity
        div {
            background-color: green;
            opacity: 0.3;
        }

        При використанні властивості opacity для додавання прозорості фону елементу всі його дочірні елементи успадковують однакову прозорість.
        Це може ускладнити читання тексту всередині повністю прозорого елементу.
    
    background-image
        Властивість background-image визначає зображення, яке буде використовуватися як фон елементу.
        За замовчуванням зображення повторюється, тому воно покриває весь елемент.
        Встановити фонове зображення для сторінки:
            body {
                background-image: url("paper.gif");
            }
        
        Повтор фону
            За замовчуванням властивість background-image повторює зображення як горизонтально, так і вертикально.
            Деякі зображення слід повторювати лише горизонтально або вертикально, інакше вони виглядатимуть дивно: 
                body {
                    background-image: url("gradient_bg.png");
                    background-repeat: repeat-x;
                    /* or */
                    /* background-repeat: repeat-y; */
                }
        
        Без повторення фону
            background-repeat: no-repeat;
        
        Положення фонового зображення
            Властивість background-position використовується для визначення положення фонового зображення.
            Розмістіть фонове зображення у верхньому правому куті: 
                body {
                    background-image: url("img_tree.png");
                    background-repeat: no-repeat;
                    background-position: right top;
                }
        
        Прокручувати або фіксувати зображення
            Властивість background-attachment визначає, чи має фонове зображення прокручуватись чи бути фіксованим (не прокручуватиметься разом із рештою сторінки).
            Вкажіть, що фонове зображення має бути фіксованим:
                body {
                    background-image: url("img_tree.png");
                    background-repeat: no-repeat;
                    background-position: right top;
                    background-attachment: fixed;
                    /* or */
                    /* background-attachment: scroll; */
                }
        
        Скорочення кода
            Щоб скоротити код, можна вказати всі властивості фону в одній.
            Замість написання:
                body {
                    background-color: #ffffff;
                    background-image: url("img_tree.png");
                    background-repeat: no-repeat;
                    background-position: right top;
                }

            Використовуйте background, щоб встановити властивості фону в одній декларації:
                body {
                    background: #ffffff url("img_tree.png") no-repeat right top;
                }

            Під час використання скороченої властивості порядок значень властивостей такий:
                ● background-color
                ● background-image
                ● background-repeat
                ● background-attachment
                ● background-position
            
            Неважливо, якщо одне зі значень властивостей відсутнє, коли інші вказані. 
            Зауважте, що ми не використовуємо властивість background-attachment у наведених вище прикладах, оскільки вона не має значення.
    


Margin (зовнішні відступи)

Властивості margin використовуються для створення зовнішніх відступів навколо елементів.
    Зовнішні відступи можна встановити для кожної сторони окремо:
        p {
            margin-top: 100px;
            margin-bottom: 100px;
            margin-right: 150px;
            margin-left: 80px;
        }
    
    Або для всіх сторін в одній властивості:
        div {
            margin: 100px 100px 150px 80px;
        }
    

Padding (внутрішні відступи)

Властивості padding використовуються для створення внутрішніх відступів навколо вмісту елементу всередині будь-яких визначених меж.
    Внутрішні відступи так само можна встановити для кожної сторони окремо:
        p {
            padding-top: 50px;
            padding-right: 30px;
            padding-bottom: 50px;
            padding-left: 80px;
        }
    
    Або для всіх сторін в одній властивості:
        div {
            padding: 25px 50px 75px 100px;
        }
    
    Якщо комбінована властивість має:
        - 4 значення - відступ визначається для кожної сторони окремо;
        - 3 значення - відступ визначається для верхньої, правої і лівої, нижньої сторони;
        - 2 значення - відступ визначається для верхньої і нижньої, правої і лівої сторони;
        - 1 значення - відступ визначається для всіх сторін одночасно.


Ширина елементу
    Властивість width визначає ширину області вмісту елементу.
    Область вмісту - це частина всередині заповнення, рамки та поля елементу. 
    Якщо елемент має задану ширину, відступ, доданий до цього елементу, буде додано до загальної ширини елементу.
    Це часто є небажаним результатом.

    Тут елементу <div> надається ширина 300 пікселів.
    Проте фактична ширина елементу <div> становить 350 пікселів (300px + 25 пікселів відступу зліва + 25 пікселів відступу справа):
        div {
            width: 300px;
            padding: 25px;
        }
    Щоб зберегти ширину на рівні 300 пікселів, незалежно від розміру відступу, можна використовувати властивість box-sizing.
    Це змушує елемент зберігати свою фактичну ширину.
    Якщо збільшити відступ, доступний простір вмісту зменшиться.
    Використовуйте box-sizing, щоб зберегти ширину на рівні 300 пікселів, незалежно від кількості відступів:
        div {
            width: 300px;
            padding: 25px;
            box-sizing: border-box;
        }

 _________________________________
|                          Margin |
|    _________________________    |
|   |                 Padding |   |
|   |                         |   |
|   |                         |   |
|   |                         |   |
|   |          Text           |   |
|   |                         |   |
|   |                         |   |
|   |                         |   |
|   |_______________Border____|   |
|                                 |
|_________________________________|


Ширина і висота елементу

Щоб правильно встановити ширину і висоту елементу в усіх браузерах, потрібно знати, як працює модель коробки.
Коли ви встановлюєте властивості ширини та висоти елементу за допомогою CSS, ви просто встановлюєте ширину та висоту області вмісту.
Щоб обчислити повний розмір елементу, ви потрібно також додати внутрішні та зовнішні відступи та рамки.
    
    Цей елемент <div> матиме загальну ширину 350 пікселів: 
        div {
            width: 320px;
            padding: 10px;
            border: 5px solid gray;
            margin: 0;
        }



Одиниці вимірювання довжини

Довжина - це число, за яким слідує одиниця вимірювання довжини, наприклад 10px, 2em тощо.

    Між числом і одиницею не може бути пропусків. Проте, якщо значення дорівнює 0, одиницю можна опустити.
    Для деяких властивостей CSS дозволена від’ємна довжина.
    Є два типи одиниць вимірювання довжини: абсолютні та відносні.

    Абсолютна довжина
        Одиниці абсолютної довжини є фіксованими.
        Довжина, виражена в абсолютних одиницях, відображатиметься як саме такий розмір.
        Одиниці абсолютної довжини не рекомендуються для використання на екрані, оскільки розміри екрана бувають різні.
        Однак їх можна використовувати, якщо відомий носій виводу, наприклад для друку.

   Одиниця | Опис
   ---------------------------------------------------------
        cm | сантиметри
   ---------------------------------------------------------
        mm | міліметри
   ---------------------------------------------------------        
        in | дюйми (1 дюйм = 96 пікселів = 2.54 сантиметра)
   ---------------------------------------------------------        
        px | пікселі (1 піксель = 1/96 від 1 дюйма)
   ---------------------------------------------------------        
        pt | 1 пункт = 1/72 від 1 дюйма
   ---------------------------------------------------------        
        pc | 1 pica = 12 пунктів
   ---------------------------------------------------------


    Відносна довжина
        Одиниці відносної довжини визначають довжину відносно іншої властивості довжини.
        Одиниці відносної довжини краще масштабуються між різними середовищами візуалізації.

   Одиниця   |   Опис
   ----------------------------------------------------------------------------------------------
        em   |   Відносно розміру шрифту елементу (2em означає 2-кратний розмір поточного шрифту)
   ----------------------------------------------------------------------------------------------
        ex   |   Відносно x-висоти поточного шрифту (використовується рідко)
   ----------------------------------------------------------------------------------------------
        ch   |   Відносно ширини символу «0»
   ----------------------------------------------------------------------------------------------
       rem   |   Відносно розміру шрифту кореневого елементу
   ----------------------------------------------------------------------------------------------
        vw   |   Відносно 1% ширини вікна браузера.
   ----------------------------------------------------------------------------------------------
        vh   |   Відносно 1% висоти вікна браузера
   ----------------------------------------------------------------------------------------------
      vmin   |   Відносно 1% найменшої сторони вікна браузера
   ----------------------------------------------------------------------------------------------
      vmax   |   Відносно 1% найбільшої сторони вікна браузера
   ----------------------------------------------------------------------------------------------
         %   |   Відносно батьківського елементу
   ----------------------------------------------------------------------------------------------



Градієнти кольору

Градієнти дозволяють відображати плавні переходи між двома або більше заданими кольорами.
Типи градієнтів:
    ● Лінійні градієнти (іде вниз/вгору/ліворуч/праворуч/діагонально).
    ● Радіальні градієнти (визначені центром).
    ● Конічні градієнти (обертаються навколо центральної точки).

Щоб створити лінійний градієнт, необхідно визначити принаймні дві кольорові зупинки.
Кольорові зупинки – це кольори, між якими ви хочете зробити плавні переходи.
Ви можете встановити початкову точку та напрямок (або кут) разом із ефектом градієнта.
    
    Синтаксис:
        background-image: linear-gradient(direction or angle, color-stop1, color-stop2, ...)
    
    Зверху-вниз (за замовчуванням)
        #grad {
            background-image: linear-gradient(red, yellow);
        }

        #grad {
            background-image: linear-gradient(to right, red, yellow);
        }

        #grad {
            background-image: linear-gradient(to bottom right, red, yellow);
        }

        #grad {
            background-image: linear-gradient(180deg, red, yellow);
        }

Прозорість

    Градієнти підтримують прозорість, яку можна використовувати для створення ефектів вицвітання.
    Додати прозорість можна, використовуючи функцію rgba(), щоб визначити колірні точки.
    Останній параметр у функції - значення від 0 до 1, яке визначає прозорість кольору: 0 - повна прозорість, 1 - повний колір без прозорості.

    У наступному прикладі показано лінійний градієнт, який починається зліва.
    Він починається повністю прозорим, переходячи до повного червоного кольору:
        #grad {
            background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));
        }
    
    

Селектори

Селектор            | Приклад         | Опис
------------------------------------------------------------------------------------------------------------------
.class              | .intro          | Вибирає всі елементи за допомогою class="intro"
------------------------------------------------------------------------------------------------------------------
.class1.class2      | .name1.name2    | Вибирає всі елементи з name1 і name2, встановленими в атрибуті class
------------------------------------------------------------------------------------------------------------------
.class1 .class2     | .name1 .name2   | Вибирає всі елементи з class=name2, які є всередині елементу з class=name1
------------------------------------------------------------------------------------------------------------------
#id                 | #firstname      | Вибирає елемент з id="firstname"
------------------------------------------------------------------------------------------------------------------
*                   | *               | Вибирає всі елементи
------------------------------------------------------------------------------------------------------------------
element             | p               | Вибирає всі <p> елементи
------------------------------------------------------------------------------------------------------------------
element.class       | p.intro         | Вибирає всі <p> елементи з class="intro"
------------------------------------------------------------------------------------------------------------------
element,element     | div, p          | <div> і всі елементи <p>
------------------------------------------------------------------------------------------------------------------
element element     | div p           | Вибирає всі елементи <p> всередині елементів <div>
------------------------------------------------------------------------------------------------------------------
element>element     | div > p         | Вибирає всі елементи <p>, де батьківським є елемент <div>
------------------------------------------------------------------------------------------------------------------
element+element     | div + p         | Вибирає перший елемент <p>, який розміщено одразу після елементів <div>
------------------------------------------------------------------------------------------------------------------
element1~element2   | p ~ ul          | Вибирає кожен елемент <ul>, якому передує елемент <p>
------------------------------------------------------------------------------------------------------------------
[attribute]         | [target]        | Вибирає всі елементи з атрибутом target
------------------------------------------------------------------------------------------------------------------
[attribute=value]   | [target=_blank] | Вибирає всі елементи з target="_blank"
------------------------------------------------------------------------------------------------------------------
